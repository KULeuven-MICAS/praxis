from util.snake.configs import get_snax_gemmx_config
from util.snake.flags import get_cc_flags, get_ld_flags
from quantized_matmul import main as get_quantized_matmul
from aggregate import aggregate_results, plot_results
from generate_mapping import generate_default_mapping
from pathlib import Path
from shutil import which

config = get_snax_gemmx_config(snax_mlir_path="../../snax-mlir")

config["num_chips"] = 1
config["num_harts"] = 3

config["snaxoptflags"] = ",".join(
    [
        "preprocess",
        "convert-linalg-to-kernel",
        "insert-accfg-op{accelerator=snax_gemmx}",
        "dispatch-kernels",
        "convert-linalg-to-dart",
        "dart-fuse-operations",
        "snax-bufferize",
        "alloc-to-global",
        "set-memory-space",
        "dart-scheduler",
        "set-memory-layout",
        "realize-memref-casts",
        "insert-sync-barrier",
        f"dispatch-regions{{nb_cores={config['num_harts']}}}",
        "dart-layout-resolution",
        "convert-dart-to-snax-stream",
        "convert-linalg-to-accfg",
        "test-add-mcycle-around-launch",
        "convert-accfg-to-csr",
        "snax-copy-to-dma",
        "snax-lower-mcycle",
        "memref-to-snax",
        "snax-to-func",
        "clear-memory-space",
        "postprocess",
    ]
)

config["mlirtransformflags"] = [
    "--pass-pipeline='builtin.module(transform-interpreter{debug-bind-trailing-args=linalg.quantized_matmul}, test-transform-dialect-erase-schedule)'"
]


module snax_rules:
    snakefile:
        "../../snax-mlir/util/snake/snax.smk"
    config:
        config


use rule * from snax_rules exclude simulate, compile_c as snax_*


files = ["quantized_matmul"]

values = [64, 72, 96]
# 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112

configs = ["cfg1", "cfg2"]


# Rules
rule all:
    input:
        "quantized_matmul_plot.html",


rule compile_c:
    input:
        "main.c",
        "{hw_config}.hjson",
        "hw_{hw_config}_build/compile_runtime.done",
    output:
        temp("main_{hw_config}.o"),
    params:
        cc_flags=lambda wildcards: get_cc_flags(
            f"hw_{wildcards.hw_config}_build/snax_cluster", "../../snax-mlir"
        ),
    shell:
        "{config[cc]} {params.cc_flags} -c {input} -o {output}"


rule simulate:
    input:
        binary="{file}_{hw_config}.x",
        simulator="hw_{hw_config}_build/snax_cluster/target/snitch_cluster/bin/snitch_cluster.vlt",
    output:
        temp(
            expand(
                "{file}_{hw_config}_trace_chip_{num_chips:02d}_hart_{num_harts:05d}.dasm",
                file=["{file}"],
                hw_config=["{hw_config}"],
                num_chips=range(config["num_chips"]),
                num_harts=range(config["num_harts"]),
            ),
        ),
    log:
        "{file}_{hw_config}.vltlog",
    shell:
        "{input.simulator} --prefix-trace={wildcards.file}_{wildcards.hw_config}_ {input.binary}  2>&1 | tee {log}"


rule get_zigzag_fixed_mapping:
    output:
        "gemm_l1_map_{m}_{n}_{k}.yaml",
    run:
        generate_default_mapping(int(wildcards.m), int(wildcards.n), int(wildcards.k))


rule get_zigzag_cme:
    input:
        "{file}_{m}_{n}_{k}.mlir",
        "gemm_l1_map_{m}_{n}_{k}.yaml",
    output:
        "{file}_{m}_{n}_{k}_cmes.pickle",
    shell:
        "praxis-opt -p preprocess {input[0]} -t zigzag --zigzag-map={input[1]} -o {output[0]}"


rule get_dataframe:
    input:
        jsons=expand(
            "{file}_{m}_{n}_{k}_{hw_config}_traces.json",
            file=files,
            m=values,
            n=values,
            k=values,
            hw_config=configs,
        ),
        pickles=expand(
            "{file}_{m}_{n}_{k}_cmes.pickle", file=files, m=values, n=values, k=values
        ),
    output:
        "{file}_results.hd5",
    run:
        aggregate_results(wildcards.file, input.jsons, input.pickles)


rule plot_dataframe:
    input:
        "{file}_results.hd5",
    output:
        "{file}_plot.html",
    run:
        plot_results(wildcards.file)


rule generate_quantized_matmul:
    output:
        "quantized_matmul_{m}_{n}_{k}.mlir",
    wildcard_constraints:
        m=r"\d+",
        n=r"\d+",
        k=r"\d+",
    run:
        get_quantized_matmul(
            int(wildcards.m),
            int(wildcards.n),
            int(wildcards.k),
            f"quantized_matmul_{wildcards.m}_{wildcards.n}_{wildcards.k}.mlir",
        )


rule generate_tiled_quantized_matmul:
    output:
        "tiled_quantized_matmul.transform.mlir",
    script:
        "tiled_quantized_matmul.py"


rule apply_transforms_mlir:
    input:
        "{file}.transform.mlir",
    output:
        "{file}.mlir",
    shell:
        "{config[mlir-opt]} {config[mlirtransformflags]} --mlir-print-op-generic --mlir-print-local-scope -o {output} {input}"


rule link_snax_binary:
    input:
        "{file}.o",
        "main_{hw_config}.o",
    output:
        "{file}_{hw_config}.x",
    params:
        ld_flags=lambda wildcards: get_ld_flags(
            f"hw_{wildcards.hw_config}_build/snax_cluster"
        ),
    shell:
        "{config[ld]} {params.ld_flags} {input} -o {output}"


rule hardware_prep:
    input:
        "{hw_config}.hjson",
    output:
        marker="hw_{hw_config}_build/prep.done",
    params:
        directory=lambda wildcards: f"hw_{wildcards.hw_config}_build",
    shell:
        "mkdir -p {params.directory} && cp -R ../../snax_cluster/ {params.directory}/ && touch {output.marker}"


rule hardware_generate_rtl:
    input:
        "{hw_config}.hjson",
        "hw_{hw_config}_build/prep.done",
    params:
        hw_config_path=lambda wildcards: Path(wildcards.hw_config).resolve(),
    output:
        marker="hw_{hw_config}_build/generate_rtl.done",
    shell:
        "make CFG_OVERRIDE={params.hw_config_path}.hjson "
        "-C hw_{wildcards.hw_config}_build/snax_cluster/target/snitch_cluster rtl-gen && "
        "touch {output.marker}"


rule hardware_compile_runtime:
    input:
        "{hw_config}.hjson",
        "hw_{hw_config}_build/generate_rtl.done",
    params:
        hw_config_path=lambda wildcards: Path(wildcards.hw_config).resolve(),
    output:
        marker="hw_{hw_config}_build/compile_runtime.done",
    threads: workflow.cores
    shell:
        "make CFG_OVERRIDE={params.hw_config_path}.hjson "
        "-C hw_{wildcards.hw_config}_build/snax_cluster/target/snitch_cluster sw -j{threads} && "
        "touch {output.marker}"


rule hardware_build:
    input:
        "{hw_config}.hjson",
        "hw_{hw_config}_build/generate_rtl.done",
    params:
        hw_config_path=lambda wildcards: Path(wildcards.hw_config).resolve(),
        ccache=lambda _: "OBJCACHE=ccache " if which("ccache") is not None else "",
    output:
        "hw_{hw_config}_build/snax_cluster/target/snitch_cluster/bin/snitch_cluster.vlt",
    threads: workflow.cores
    shell:
        "{params.ccache}make CFG_OVERRIDE={params.hw_config_path}.hjson "
        "-C hw_{wildcards.hw_config}_build/snax_cluster/target/snitch_cluster bin/snitch_cluster.vlt -j{threads}"
